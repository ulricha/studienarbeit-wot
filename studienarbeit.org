* Noch offene Punkte
** DONE Paper zu Community-Algorithmen an Hauck schicken
   CLOSED: [2009-11-06 Fri 16:26]
** DONE Metagraph zeichnen
   CLOSED: [2009-11-06 Fri 15:51]
**** DONE Selbstkanten entfernen
     CLOSED: [2009-11-05 Thu 18:05]
**** DONE Knoten ohne Kanten entfernen
     CLOSED: [2009-11-05 Thu 18:05]
**** DONE Wie viele Komponenten müssen weggelassen werden, damit das ganze zeichenbar wird? < 10?
     CLOSED: [2009-11-06 Fri 13:35]
**** DONE Bild an Hauck schicken
     CLOSED: [2009-11-06 Fri 15:41]

** STARTED Modul für wotsap-export schreiben
   - State "STARTED"    [2009-11-09 Mon 12:30]
** TODO In sksdump alle benötigten Daten extrahieren
*** Alle gültigen UIDs pro Schlüssel ausgeben -> Liste von UIDs pro Schlüssel
*** Ablaufdatum eines Schlüssels und Ablaufdatum von Signaturen
** TODO Datenformat umstellen: wotsap + postgres für Schlüsselinformationen
*** TODO Modul schreiben, dass Liste von ekeys in postgresql ablegt
*** TODO vorhandenen Code für Wotsap-import anpassen
** TODO Vorhandenen Code (insb. clustering_coefficient und betweeness) überprüfen
*** Warum fehlen teilweise Werte?
** TODO Statistik über Schlüsseleigenschaften
*** Verwendete Algorithmen (Pubkey, Signatur)
*** Schlüssellängen (insb. für RSA interessant -- gibt es noch nennenswert RSA-Schlüssel <= 1024 bit?)
*** Cert level (werden Level != 0x10 von nennenswert vielen Leuten verwendet?)
*** Wie viele Schlüssel haben ein Ablaufdatum?
*** Wie viele Signaturen haben ein Ablaufdatum?
*** Alter der Schlüssel
** TODO Untersuchung der grösseren Komponenten (2-3 grössten)
*** Wie alt sind die Schlüssel im Durschschnitt?
*** Wann wurde in dieser Komponente das letzte mal signiert?
*** aus welchen Domains kommen user-ids?
** TODO Reachable und Reaching set ausrechnen
*** Anhand des Metagraphen ausrechnen, wie viele Knoten von der MSCC erreicht werden können bzw. wie viele diese erreichen können
** TODO Systematisch die Entwicklung der Komponenten anhand von 3 Dumps nachvollziehen
Bisher wurden zwei Dumps verwendet: 1. Anfang August, 2. Ende
September (?). Beim zweiten ist erwartungsgemäss die MSCC gewachsen
(wenige hundert Knoten). Allerdings hat sich die nächstkleinere
Komponente eine geringere Grösse als beim 1. dump. Das kann eigentlich
nur daran liegen, dass diese Komponente durch das Expiren von
Schlüsseln/Signaturen zerfallen sind.

** TODO Analyse der Community-Struktur
*** DONE Kann der Graph ohne (wesentlichen) Informationsverlust in einen ungerichteten Graphen umgewandelt werden?
    CLOSED: [2009-11-05 Thu 18:17]
*** TODO Wie entwickelt sich der Graph, wenn (iterativ) Knoten mit Grad 1 entfernt werden?
*** TODO Literatur über Community-Algorithmen sichten
*** TODO Einen Algorithmus auswählen und implementieren
** TODO Besseres Zentralitätsmass
** TODO Zeitlichen Verlauf der ZKs untersuchen

* Lablog
** Notizen <2009-11-05 Thu> 
*** Frage: Woher stammen die Signaturen?
    Lässt sich unterscheiden, ob Signaturen aus einem privatem
    Face-to-face-meeting stammen oder auf einer (grossen)
    Keysigning-Party entstanden sind? Wie hoch ist der Anteil der
    Nicht-Keysigning-Signaturen?
*** Idee: Unterscheidung soziale Gruppe <-> KSP
    Die Unterscheidung, ob eine Community eine soziale Gruppe oder
    eine Keysigning-Party darstellt, kann anhand der Signaturzeit
    getroffen werden. Wenn alle (die meisten) Signaturen in einer
    Community in einem engen Zeitfenster gemacht wurden, ist es
    höchstwahrscheinlich eine Keysigning-Party.
*** Ergebnis one-way-Signaturen
    Mit dem Datenstand vom 05.11.09 sind 408464 von 439355 Signaturen
    nicht one-way, d.h. die grosse Mehrzahl der Signaturen beruht auf
    Gegenseitigkeit. Das sind wie erwartet wenige, da Signaturen im
    normalen Vorgang in beide Richtungen unternommen werden. Damit
    scheint es vertretbar, den Graphen für die Community-Analyse in
    einen ungerichteten Graphen umzuwandeln.
*** Zwischenstand Metagraph
    Mit 263 (max_size = 10) Knoten wird das Ganze darstellbar (fdp ->
    spring model, Fruchtermann und Rheingold).

    Allerdings:
**** Jeder Knoten hat eine Kante zu sich selbst -- Grund?
**** Eine Reihe von Komponten hat keine ausgehenden/eingehenden Kanten. Solche Knoten entfernen und herausfinden, wie weit die Komponentengrösse dann reduziert werden kann.


    Ohne singleton Knoten und n = 224 (max_size = 8) ist der Graph
    noch zeichenbar. Allgemein scheint fdp die besten bzw. einzig
    brauchbaren Ergebnisse zu liefern. Die Qualität der Zeichnung ist
    noch sehr zu verbessern. Dazu könnte die Grösse der Knoten
    reduziert werden (nur Grösse, Kreis enger gezeichnet). Ausserdem
    sollte die Anzahl der aggregierten Kanten sichtbar sein,
    z.B. indem eine "Metakante" unterschiedlich dick gezeichnet wird.
** Notizen <2009-11-06 Fri>
*** Richtiges Ergebnis one-way-Signaturen
    Es sind nicht 408000 Signaturen nicht-one-way wie gestern
    behauptet, sondern es ist gerade anders herum. D.h. zu 408000
    Signaturen gibt es keine Signatur in umgekehrter Richtung. Demnach
    gibt es nur zwischen $(440000-408000) / 2 = 16000$ Paaren von
    Knoten wechselseitige Signaturen. Das kann eigentlich nicht sein
    und wirft (offensichtlich optimistische) Annahmen über die
    Entstehung von Signaturen über den Haufen.

    Allerdings wird das plausibler, wenn man sich die Gradverteilung
    anschaut. Die grosse Mehrheit der Knoten hat einen Grad von
    höchstens 3 (allein 18000 mit 1) und es scheint nicht
    unwahrscheinlich, dass das eine Signaturenpaar eines
    Grad-1-Knotens gerade nicht auf Gegenseitigkeit beruht. Das würde
    bedeuten, dass die ganzen Grad-1/2/3 Knoten nur signiert haben
    (eher nicht signiert wurden bzw. nicht vom signierten signiert
    wurden).

    Wie sieht die Verteilung der Indegrees aus? Trifft out-degree < 3
    und in-degree < 3 häufig zusammen (sehr wahrscheinlich)?

    Das Problem bleibt allerdings, dass der Graph nicht so ohne
    weiteres in einen ungerichteten Graphen umgewandelt werden
    kann. Es muss jetzt darüber nachgedacht werden:
**** wie gross der Informationsverlust ist, wenn one-way- und two-way Signaturen unterschiedslos in eine ungerichtete Kante überführt werden
**** ob es Sinn macht, wie bei Pons et al. angemerkt, iterativ Kanten mit Grad 1 zu entfernen. Tragen diese tatsächlich nichts zur Community-Struktur bei?

* org-mode configuration
#+STARTUP: overview
#+STARTUP: hidestars
#+STARTUP: logdone
#+PROPERTY: Effort_ALL  0:10 0:20 0:30 1:00 2:00 4:00 6:00 8:00
#+COLUMNS: %38ITEM(Details) %TAGS(Context) %7TODO(To Do) %5Effort(Time){:} %6CLOCKSUM{Total}
#+PROPERTY: Effort_ALL 0 0:10 0:20 0:30 1:00 2:00 3:00 4:00 8:00
#+TAGS: { WSI(w) HOME(h) } COMPUTER(c) PROJECT(p) READING(r) ERRANDS(e) PHONE(h)
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w@) APPT(a) | DONE(d!) CANCELLED(c!) DEFERRED(f!)
