* Studienarbeit Web of Trust
** Abstract
** Einleitung
** Grundlagen und Theorie
*** Kryptographie mit öffentlichen Schlüsseln
**** Funktionsprinzip
**** Authentisierung von Schlüsseln
***** Grundproblem
***** Zentrale PKI
***** Web of Trust
*** PGP/GnuPG
**** Geschichte von PGP/PGP.com und GnuPG
**** Eigenschaften/Fähigkeiten der Implementierungen
*** Der OpenPGP-Standard
**** Paketformat v4
**** Unterschiede v3
*** Keyserver-Netzwerk
**** Prinzip: Öffentliche Keyserver (auch private denkbar) stellen OpenPGP-Keys für PGP-Benutzer bereit
**** Keyserver gleichen ihren Datenbestand untereinander ab
**** Beim WoT (Signaturen...) macht der Keyserver die gesamte Vernetzungsstruktur öffentlich. Das bedeutet ein Privacy-Problem (Signaturen sind Abbild von soz. Beziehungen/Vertrauen), das wahrscheinlich (Beleg?) vielen Benutzern nicht bewusst ist. D.h. Keyserver stellen das soziale Netzwerk zur Verfügung.
**** Das öffentliche PGP-Netzwerk
***** Struktur und Grösse
***** Wichtiges Grundprinzip: Was dort ist bleibt. Vorteile und Nachteile...
****** Warum gut? Warum schlecht? (WP)
**** Andere Ansätze: PGP Global Directory
*** Graphentheorie allgemein
*** Netzwerkanalyse
**** Netzwerkstatistiken
***** Clustering coefficient
***** Betweeness Centrality
**** Communities - Definition, Algorithmen
** Related Work
*** Web of Trust im Allgemeinen
**** Analyse von WoT-Communities: Duch2005, Boguna2004
**** Wotsap + Webseiten (
**** Netzwerkstatistiken: Capkun2002
*** Analyse von Netzwerken allgemein
*** Analyse von Community-Strukturen
** Methoden und Materialien -> Beschreibung der Software, der Datenextraktion etc.
***** Warum toll?
*** SKS Software
**** Löst veraltetes PKS ab
***** Austausch über Emails
***** Probleme mit OpenPGP-Features: Welche? (Subkeys? KeyIDs?...)
**** Hat PKS fast vollständig abgelöst (alle wichtigen Keyserver umgestellt)
**** Geschrieben in Ocaml
**** Design: Zwei Prozesse (db und recon)
**** DB: Berkeley-Datenbank
**** Algorithmus zum Abgleich der Datenbanken (Set reconciliation) kurz anreissen

*** Warum eigene Extraktion? Warum nicht die wotsap-Daten benutzt?
**** Untersuchung der Struktur abseits der MSCC
**** Komplette Geschichte liegt vor, Zustand zu einem beliebigen Zeitpunkt
**** Vollständigere Informationen über Schlüssel und Signaturen
**** Wotsap nicht korrekt
***** Wodurch Fehler verursacht
***** Unterschiede zwischen Datensätzen
*** eigene Software - Methode
**** Extraktionsteil ist Patch gegen SKS -> ebenfalls in Ocaml
**** Iteration über Datenbank, Reduzierung auf interessante Daten (Welche?)
**** Speicherung in SQL-DB, vielfältige Abfragemöglichkeiten
***** Tabellenstruktur
**** Trennung von Extraktion und DB: Sinnvoll, weil Extraktion zeitaufwendig und nur einmal (reicht für diese Arbeit aus)
**** Könnte genauso neue Daten live in Datenbank kippen -> Service, der immer die aktuellen Daten anbietet

*** MPI
**** Warum
**** Methode
***** Distance_statistics trivial
***** Betweeness nach Brandes
** Ergebnisse
*** Kennzahlen Graph insgesamt
**** Wie viele Knoten, Kanten, etc.
*** Komponentenstruktur insgesamt
**** Zahl der Komponenten, Grössenverteilung (scale-free?)
**** Struktur der Komponenten -> wie sind diese untereinander vernetzt (Aggregatkanten...)
**** Zeichung der Struktur (bessere Zeichnung als bisher)
*** Kleine Komponenten (einige wenige herausgreifen + Gesamtbild)
**** Interne Struktur (Grade, Pfadlängen etc)
**** Zusammensetzung der Keys
***** Einteilung der Komponenten nach Nation, Institution, Zeit
***** Aktivität? Ist die Komponente über die Zeit entstanden oder auf einmal (KSP) (Ad-Hoc-Mass)

*** MSCC
**** Netzwerkstatistiken
***** Gradverteilung in/out
***** Zwischen ziemlich wenigen Keys gibt es gegenseitige Signaturen
***** Andere Eigenschaften: (durschnittliche Pfadlängen, Durchmesser, Radius, Eccentricity)
***** (Fehlt noch, trivial): MSD -> Mean significant distance
***** Fragestellung: Small-World? Scale-free?
****** Auch wenn die Gradverteilung nicht scale-free im strikten Sinn ist, hat sie doch wahrscheinlich qualitativ die Eigenschaften, die davon erwartet werden

*** Was anfangen mit Betweeness Centrality? Ist zwar ein hübsches Werkzeug, trägt aber nichts zur Fragestellung bei (?)

*** Communities
**** Liefern Algorithmen erkennbar sinnvolle Einteilung?
**** (falls ich dazu komme) Vergleich von directed und undirected: Motivation s.o.
**** lassen sich soziale Gruppen und KSPs unterscheiden?
**** Community-Struktur zeichnen
**** Interne Struktur der Communities
**** Vergleich mit Komponentenstruktur?
**** Komponenten sind letztendlich auch Communities, d.h. insgesamt Community-Analyse mit zwei Methoden

*** Statistiken
**** Verwendung von Algorithmen (Pubkey und Sig)
**** Zeitliche Entwicklung
***** Zeitliche Interpretation (Einführung von GnuPG, Änderung von Algorithmen-Defaults, SHA1-Problem...)
***** Wie entwickelt sich das Wachstum? Stagniert die Grössenentwicklung?
***** Wie ist das Alter der im Moment aktiven Schlüssel verteilt?
**** Verwendung von Cert levels
** Diskussion
*** MSCC ist die einzige Komponente, die ein aktives WoT mit globalem Anspruch(!) darstellt
*** Geringe Grösse der MSCC in Relation zur Gesamtzahl der Schlüssel und zum Internet
*** überwiegender Teil der PGP-Benutzer legt keinen Wert auf Authentication (oder macht das privat, ist aber unwahrscheinlich)
*** Aus Gradverteilung: Selbst in der MSCC ist die grosse Mehrzahl (Grad 1, 2) kaum angebunden, dadurch kaum Chance auf redundante Trust-Pfade, kaum Robustheit
*** Vergleich mit Literatur: Andere WoT-Analysen: Capkun etc.
*** Vergleich mit Literatur: Social Networks

*** Communities: Auflösungslimit
*** Communities: (falls nicht gemacht) eigentlich wären Overlapping Communities sinnvoll
*** Communities: Vergleich mit Literatur, insb. Paper zu WoT-Communities

** Conclusion
*** "Toolbox" (naja) für Extraktion und Analyse von PGP-WoT-Daten
*** Analyseergebnisse
*** Nochmal betonen, dass Erreichbarkeit im WoT noch lange nichts über Trust/Validity aussagt. 
*** Wahrsch. Schlussfolgerung: Nerdspielzeug + ernsthaftes Werkzeug für klar umrissene Communities
*** Spekulation über Ursachen geringer Verwendung: Insgesamt zu komplex? Doku zu schlecht? Werkzeuge zu schlect?
*** Basis für Vergleich mit hierarchischer PKI?

